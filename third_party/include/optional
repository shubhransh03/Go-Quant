// Minimal std::optional stub for IntelliSense only.
#ifndef THIRD_PARTY_OPTIONAL_STUB_FORWARD
#define THIRD_PARTY_OPTIONAL_STUB_FORWARD

#if defined(__INTELLISENSE__) || defined(__clangd__)
namespace std {
struct nullopt_t { constexpr explicit nullopt_t(int) {} };
inline const nullopt_t nullopt{0};
template <typename T>
class optional {
public:
    optional() : has(false) {}
    optional(nullopt_t) : has(false) {}
    optional(const T &v) : has(true), value_(v) {}
    explicit operator bool() const { return has; }
    T& operator*() { return value_; }
    const T& operator*() const { return value_; }
private:
    bool has;
    T value_;
};
} // namespace std
#else
#include_next <optional>
#endif

#endif // THIRD_PARTY_OPTIONAL_STUB_FORWARD
